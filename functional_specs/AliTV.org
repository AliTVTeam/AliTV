#+AUTHOR: Markus Ankenbrand, Frank FÃ¶rster
#+TITLE: Functional specifications for the Alignment Toolbox and Visualization (AliTV)
#+DESCRIPTION: This file contains the functional specification of the AliTV
#+EMAIL: markus.ankenbrand@uni-wuerzburg.de, frank.foerster@biozentrum.uni-wuerzburg.de

#+LATEX_CLASS: scrartcl
#+LATEX_CLASS_OPTIONS: [a4paper,english]
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}

#+TODO: TODO(t!) INPG(i@/!) TEST(n@/!) TESTFAIL(f@/!) TESTPASS(p@/!) | DONE(d!) REJC(c@)


* Objectives of AliTV
  The software Alignment Toolbox and Visualization (AliTV) should be
  used to interactively generate 'publication ready' figures starting
  from biological data sets. Moreover, its capability of changing the
  figure output on the fly extends the functionality of AliTV to an
  analysis tool.
** Must-have criteria
   - Reimplementation of existing functionality including documentation and testing
     - Calculate coordinates for links (linear layout)
     - Draw links (linear layout)
     - Color karyos (linear layout)
     - Add ticks to the karyos (linear layout)
     - Color links based on identity (linear layout)
     - Fade in/out links on mouse over event (linear layout)
     - Reverse karyos and corresponding links by clicking on the karyos
   - Visualization of annotated features on the karyos, e.g. genes or
     inverted repeat regions
   - Visualization of a provided phylogenetic tree next to the alignments
   - Add text labels to the genomes, chromosomes (karyos), and features
   - Implement APIs to the AliTV class to allow remote configuration of
     - graphic parameters of AliTV objects
     - filter parameters of AliTV objects
** Nice-to-have criteria
   - Shade chromosomes belonging to a genome differently
   - Add legends for color schemes:
     - genomes
     - identity for links
     - features
   - Allow reordering of
     - chromosomes (linear layout)
     - genomes (for a given tree: branches can only be swapped, but
       free reordered within multifurcations)
   - Implement a zoom/panning feature:
     - Independent zoom for x and y axis
     - Independent zoom levels for different genomes
     - Independent panning of genomes
   - Plot tracks onto genomes, e.g. coverage or GC content
   - Extend filter API to enable the user to hide single elements
     (chromosomes, genomes) from the plot, but give a number of hidden
     elements for each genome
   - Add support for different feature classes with individual
     graphical representation
   - export of the svg
   - creation of save states for the current visualization
   - import of save states of visualization (data, configuration,
     filters)
** (Abgrenzungskriterien)
   - The bachelor thesis is restricted to the graphical representation of readily provided data (JSON, test sets exist).
   - The calculation and preparation of different data types is out of scope of the thesis.
   - In general the alignment and tree calculations are performed by external programs (some may be called by AliTV)
   - AliTV is not an alignment editor, while data may be filtered it is not supported to alter any data
* Usage
** Application field
   AliTV can be used for visualization of multiple whole genome
   alignments. The current view can be exported as (almost)
   'publication ready' SVG and all setting to restore the view can
   also be saved. Moreover its interactive features allow the
   analysis of those multiple whole genome alignments.
** Target audience
   Biologists working on sequencing data.
** System requirements
   For the graphical user interface a modern web browser is
   required. For data preparation exact specification have to be made!
* Environment
** Software
   For the GUI a javascipt enabled web browser is required. For data
   preparation exact software specification have to be made!
** Hardware
   AliTV does not require special hardware.
** (Orgware)
* Functionality
** /F0100/ Reimplementation of existing functionalty (for linear layout)
*** /F0110/ Calculate coordinates for links
    To draw linkage information from the given dataset, it is needed
    to transform chromosome specific coordinates into canvas
    coordinate system.
*** /F0120/ Filter linkage information for neighbors
    Reduce the number of linkage information between different
    chromosomes by filtering out all links but keeping the links of
    neighbored chromosomes.
*** /F0130/ Draw links
    Given the coordinates from /F0101/ and /F0102/ one can draw links between the
    chromosomes using the d3 toolkit.
*** /F0135/ Color links according to their identity
    Links should be colored by their identity value. Therefore a
    gradient should be used starting at high identity with green and
    stopping at low identity with red.
*** /F0140/ Color chromosomes
    To distinguish between different genomes, we need to color
    chromosomes according to the genome they belong to.
*** /F0145N/ Differentiate color of chromosomes
    In addition to /F0104/ we want to shade the color of different
    chromosomes belonging to the same genome. This can be achieved by
    using a gradient for a genome color.
*** /F0150/ Add ticks to chromosomes
    For a better navigation on the chromosomes we need ticks and tick
    labels indicating the position on the corresponding
    chromosome. Both should be drawn by default and need to be
    configurable via configuration.
*** /F0160/ Fade out links on mouseover event
    If the mouse pointer enters the area of a chromosome all links
    should be faded out except the links of the chromosome the mouse
    points to. This enables the user to investigate the links in more
    detail.
*** /F0165/ Fade in links on mouseout event
    If the mouse pointer leaves the area of a chromosome all links
    should be faded in again.
*** /F0170/ Reverse chromosomes and annotated links on left click
    The orientation of a chromosome can be altered by clicking onto
    that chromosome.
** /F0200/ Visualization of user provided features onto the chromosomes
   The user can provide features which should be annotated on the
   chromosomes of a genome, e.g. genes or inverted repeat
   regions. Those features should be marked on the chromosomes by
   assigning a different color. The generic style to use for feature
   annotation should be configured via configuration. Features which
   are linked to other features have to be ignored.
** /F0300N/ Supporting of different feature classes
   The user should be enabled to provide different feature classes for
   the annotation of chromosomes. The information are provided by the
   data object. Therefore, a feature is not only classified by linking
   or non linking feature, but also other feature classes are
   possible. Those classes can be genes, t-RNAs, (inverted) repeats,
   etc.
** /F0350N/ Drawing of different feature classes
   The features from /F0300/ have to be drawn onto the
   chromosomes. The style information for the feature class should be
   provided by the configuration. If the feature class has no
   predefined style a fallback style should be used. Changes on
   feature drawing are made by altering the configuration. Some sample
   feature classes need to be provided:
    - gene
    - (inverted) repeat
    - N stretch
** /F0400/ Draw a provided phylogenetic tree next to the alignments
   If the user provides a phylogenetic tree other than a
   multifurcation, the tree should be drawn next to the alignment. The
   exact position (left or right) of the tree should be given by the
   configuration. There it should be also possible to switch off the
   tree drawing.
** /F0500N/ Allow reordering of genomes (linear layout)
   The order of genomes should be alterable by drag and drop
   vertically. If a non multifurcation tree is provided only swapping
   meaning rotating at branch points is allowed to keep the
   information of the tree. The tree information need to be adjusted
   accordingly. If the tree is not displayed, it is treated as a
   multifurcation tree. If later the tree drawing is enabled
   again. Genome ordering has to be reset back to the order provided
   by the tree.
** /F0550N/ Allow reordering of chromosomes (linear layout)
   Chromosomes can be reordered by using drag and drop horizontally.
** /F0600/ Text labels for the genomes, chromosomes, and features
   The labels for genomes and chromosomes should be drawn next to the
   specific element by default. For features (non linking) the labels
   are switched off by default. For all three elements drawing or non
   drawing should be configurable by the configuration.
** /F0650N/ Support text labels on or off for feature classes
   If other feature classes are supported one need to be able to
   switch on or off the drawing of the individual feature class using
   the configuration.
** /F0700/ API for remote control of graphical parameters [0/7]
   Implement an API for the following graphical parameters
   - [ ] Spacer between chromosomes
   - [ ] Spacer between genomes
   - [ ] Height of chromosome rectangles
   - [ ] Size of the canvas
   - [ ] Tick frequency
   - [ ] Tick labeling frequency
   - [ ] Tree drawing on/off
** /F0750/ API for remote control of filter parameters [0/6]
   Implement an API for the following filter parameters
   - [ ] filter threshold for minimum link identity
   - [ ] filter threshold for maximum link identity
   - [ ] filter threshold for minimum link length
   - [ ] filter threshold for maximum link length
   - [ ] skip chromosomes without linkage information
   - [ ] skip chromosomes without visible linkage information
** /F0800/ Extend API to hide specific elements [0/6]
   Extend the API to allow hide specific elements from the plot. This
   can be done for:
   - [ ] whole genomes
   - [ ] whole chromosomes
   - [ ] but also specific links.
   Additionally counters should be displayed indicating how many
   genomes are hidden, how many chromosomes of a genome are hidden and
   how many links of a chromosome are hidden. All levels need a API
   call to reset the hidden state to visible again
   - [ ] whole genomes
   - [ ] whole chromosomes
   - [ ] but also specific links.

** /F0900N/ Legend for colors used [0/3]
   Add legends for the used colors:
   - [ ] genomes
   - [ ] identity for links
   - [ ] color code for different feature classes
** /F1000N/ Export as SVG
   The class needs an API call to export the whole drawing with all
   current settings as SVG graphic.
** /F1100N/ Create snapshots of current settings
   The user should be allowed to take snapshots of all current
   settings to store them. Together with /F1200N/ this enables the
   user to restore the same environment later or provide the settings
   to other scientists.
** /F1200N/ Import snapshots of settings
   The user should be allowed to import snapshots of all current
   settings generated by /F1100N/. Together with /F1100N/ this enables the
   user to restore the same environment later or provide the settings
   to other scientists.
** /F1300N/ Plot tracks onto chromosomes
   The user can provide additional tracks for the
   chromosomes. Examples for those tracks are GC content or a coverage
   information. Those information should be drawn onto the
   corresponding chromosomes upon request by the user. Therefore an
   API call have to be provided and the functionality to draw a plot
   onto the chromosomes of a genome for all genomes with the
   corresponding information.
* Data
** Definition of data object
  #+BEGIN_SRC javascript
/**
 * {Object}  karyo                        - the chromosome information
 * {Object}  karyo.chromosomes            - the chromosome details, karyo IDs as keys
 * {Number}  karyo.chromosomes.genome_id  - number of genome to which this chromosome belongs
 * {Number}  karyo.chromosomes.length     - length in bp
 * {String}  karyo.chromosomes.seq        - sequence of the chromosome
 * {Object}  features                     - the feature information, feature IDs as keys
 * {String}  features.karyo               - the karyo ID
 * {Number}  features.start               - start position on the sequence
 * {Number}  features.end                 - end position on the sequence
 * {Object}  links                        - the link information
 * {String}  links.source                 - source feature of the link
 * {String}  links.target                 - target feature of the link
 * {Number}  links.identity               - identity of the link
 */
  #+END_SRC
** Definition of filters object
   #+BEGIN_SRC javascript
/**
 * {Object}  filters                              - the data dependent displaying information
 * {Object}  filters.karyo                        - the chromosome dependent displaying information
 * {Array}   filters.karyo.order                  - array of chromosome IDs in the desired order (circular layout)
 * {Array}   filters.karyo.genome_order           - array of genome IDs in the desired order (linear layout)
 * {Object}  filters.karyo.chromosomes            - the chromosome drawing details, filters.karyo IDs as keys
 * {Boolean} filters.karyo.chromosomes.reverse    - should the sequence be treated as its reverse (complement)
 * {Boolean} filters.karyo.chromosomes.visible    - should the sequence be displayed at all
 */
   #+END_SRC
** Definition of initial configuration object
   #+BEGIN_SRC javascript
/**
 * {Number}  width                  - The width of the svg in px.
 * {Number}  height                 - The height of the svg in px.
 * {Object}  linear                 - The configuration options for the linear layout.
 * {Number}  linear.genomeDistance  - The vertical distance between adjacent genomes in px.
 * {Number}  linear.karyoHeight     - The height of each chromosome in px.
 * {Number}  linear.karyoDistance   - The horizontal distance between adjacent chromosomes of the same genome in bp.
 * {Object}  circular               - The configuration options for the circular layout.
 * {Number}  circular.karyoHeight   - The height of each chromosome in px.
 * {Number}  circular.karyoDistance - The distance between adjacent chromosomes on the circle in bp.
 * {Number}  circular.outerRadius	  - The outer radius of the circle in px.
 */

   #+END_SRC
* User interface
  #+BEGIN_SRC html
<html>
<head>
<meta charset="utf-8">
<link rel="stylesheet" href="lib/jquery-ui.min.css">

<script src="lib/d3.v3.min.js"></script>
<script src="lib/jquery.min.js"></script>
<script src="lib/jquery-ui.min.js"></script>

<script src="js/wgaPipeline.js"></script>

<script type="text/javascript">
	var wga;
	$(document).ready(function() {
		var svg = $('#wgaCanvas');
		wga = new WgaPipeline(svg);
		$.getJSON('data/data.json', function(data) {
			wga.setData(data);
			$.getJSON('data/filters.json', function(filters) {
				console.log(filters);
				wga.setFilters(filters);
				wga.drawLinear();
			});
		});
	});
</script>
</head>

<body>
<svg id='wgaCanvas'></svg>
<button type="button" onclick="wga.drawCircular();">Draw Circular</button>
<button type="button" onclick="wga.drawLinear();">Draw Linear</button>
</body>
</html>
  #+END_SRC
* Quality targets
